#!/usr/bin/env python3
#
# CS3700, Fall 2021
# John Henry Rudden, Daniel Susman
# TCP Project Starter Code

import datetime
import json
import sys
import socket

from base64 import b64decode

def log(string):
    sys.stderr.write(datetime.datetime.now().strftime(
        "%H:%M:%S.%f") + " 3700recv: " + string + "\n")


MSG_SIZE = 1500
TIMEOUT = 30
DATA_BUFFER = {} # maybe []
# LAST_ACKED = None # Packet?
NEXT_IN_ORDER = 0
OUT_OF_ORDER = [] # list of out of order packets

# Message Fields
SEQ = "sequence"
DATA = "data"
ACK = "ack"
SACK = "sack"
EOF = "eof"

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = int(sys.argv[1])

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

def send_ack(packet, no_sack_needed, addr):
    global NEXT_IN_ORDER
    # Send back an ack to the sender
    msg = json.dumps({ACK: True, SEQ: packet[SEQ], EOF: packet[EOF]})
    if not no_sack_needed:
        msg[SACK] = NEXT_IN_ORDER
    log("ABOUT TO SEND " + msg)
    sent = sock.sendto(msg.encode(), addr)
    log("[sent] " + str(sent))
    if sent < len(msg):
        log("[error] unable to fully send packet")

def find_new_last(decoded):
    global NEXT_IN_ORDER, OUT_OF_ORDER
    log(str(NEXT_IN_ORDER))

    NEXT_IN_ORDER = decoded[SEQ] + len(decoded[DATA])
    # sort the list based on sequence number
    OUT_OF_ORDER.sort(key=lambda x: x[SEQ])
    index = 0
    while index < len(OUT_OF_ORDER):
        curr = OUT_OF_ORDER[index]
        if NEXT_IN_ORDER == curr[SEQ]:
            NEXT_IN_ORDER == curr[SEQ] + curr[DATA]
            # print here?
            sys.stdout.write(curr[DATA])
            del OUT_OF_ORDER[index]
        else:
            return

# Now listen for packets
while True:
    result = sock.recvfrom(MSG_SIZE)

    # If nothing is ready, we hit the timeout
    if result:
        (data, addr) = result

        try:
            log(str(data) + "RECEIVED")
            decoded = json.loads(data.decode())
            seq_n = decoded[SEQ]
            data_len = len(decoded[DATA]) # TODO: might not be 1460 because bit convert not integer

            # If the EOF flag is set or some data have been sent, add to DATA_BUFFER
            if decoded[EOF] or decoded[DATA]:
                if DATA_BUFFER.get(seq_n) is None:
                    # not there, add it
                    DATA_BUFFER[seq_n] = decoded
                    no_sack_needed = seq_n == 0 or data_len + seq_n == NEXT_IN_ORDER
                    # check for in order
                    if no_sack_needed:
                        log("Accepted data in order: " + str(seq_n) + " length: " + str(data_len))
                        log(str(decoded[DATA]))
                        sys.stdout.buffer.write(b64decode(decoded[DATA].encode()))
                        if decoded[EOF]:
                            log("there")
                        
                        find_new_last(decoded)
                    else:
                        log("Accepted data out of order: " + str(seq_n) + "length: " + str(data_len))
                        OUT_OF_ORDER.append(decoded)

                    send_ack(decoded, no_sack_needed, addr)

                else:
                    # this is a duplicate, ignore it
                    log("Received a duplicate " + str(decoded[SEQ]) + "length: " + str(data_len) + ", ignoring.")

        except (ValueError, KeyError, TypeError) as e:
            log("[recv corrupt packet]")
            raise e
    else:
        log("[error] timeout")
        sys.exit(-1)
