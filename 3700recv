#!/usr/bin/python3
#
# CS3700, Fall 2021
# John Henry Rudden, Daniel Susman
# TCP Project Starter Code

import datetime
import json
import sys
import socket

from base64 import b64decode

def log(string):
    sys.stderr.write(datetime.datetime.now().strftime(
        "%H:%M:%S.%f") + " 3700recv: " + string + "\n")


MSG_SIZE = 1500
TIMEOUT = 30
DATA_BUFFER = {} # collection of packets we have recieved.
NEXT_IN_ORDER = 0 # next inorder sequence number we have not yet recieved yet.
OUT_OF_ORDER = [] # list of out of order packets we have recieved.

# Message Fields
SEQ = "sequence"
DATA = "data"
ACK = "ack"
SACK = "sack"
EOF = "eof"

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = int(sys.argv[1])

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

def send_ack(packet, no_sack_needed, addr):
    """Send an ack to the sender with fields based on recieved packet info."""
    global NEXT_IN_ORDER
    # Send back an ack to the sender
    msg ={ACK: True, SEQ: packet[SEQ], EOF: packet[EOF]}
    if not no_sack_needed:
        msg[SACK] = NEXT_IN_ORDER
    msg = json.dumps(msg)
    sent = sock.sendto(msg.encode(), addr)
    log("[sent] " + str(sent))
    if sent < len(msg):
        log("[error] unable to fully send packet")

def find_new_last(decoded):
    """Determine the next in order sequence number not yet recieved."""
    """If next sequence number to recieve was recieved out of order, then
    recursively determine next value. """
    global NEXT_IN_ORDER, OUT_OF_ORDER

    NEXT_IN_ORDER = decoded[SEQ] + decoded["length"]
    # sort the list based on sequence number
    OUT_OF_ORDER.sort(key=lambda x: x[SEQ])
    index = 0
    while index < len(OUT_OF_ORDER):
        curr = OUT_OF_ORDER[index]
        if NEXT_IN_ORDER == curr[SEQ]:
            NEXT_IN_ORDER = curr[SEQ] + curr["length"]
            sys.stdout.buffer.write(b64decode(curr[DATA].encode()))
            del OUT_OF_ORDER[index]
        else:
            return

# Keep reading from socket until we have recieved an eof packet.
while True:
    result = sock.recvfrom(MSG_SIZE)

    # If nothing is ready, we hit the timeout
    if result:
        (data, addr) = result

        try:
            decoded = json.loads(data.decode())
            log("PACKET " + str(decoded[SEQ]) + " RECEIVED")
            seq_n = decoded[SEQ]
            data_len = decoded["length"]
            # if we recieve an end of file packet then quit. We are done!
            if (decoded['eof']):
                log("[completed]")
                sys.exit(0)

            # If the EOF flag is set or some data have been sent, add to DATA_BUFFER
            if decoded[DATA]:
                no_sack_needed = seq_n == 0 or seq_n <= NEXT_IN_ORDER
                if DATA_BUFFER.get(seq_n) is None:
                    # have we recieved this packet before
                    DATA_BUFFER[seq_n] = decoded
                    # check for in order
                    if no_sack_needed:
                        sys.stdout.buffer.write(b64decode(decoded[DATA].encode()))

                        # this packet was in order, so see what our next inorder ACK we haven't recieved is.
                        find_new_last(decoded)
                    else:
                        log("Accepted data out of order: " + str(seq_n) + "next in order: " + str(NEXT_IN_ORDER))
                        OUT_OF_ORDER.append(decoded)

                    send_ack(decoded, no_sack_needed, addr)

                else:
                    # this is a duplicate, don't add it to data store, but resend ACK
                    send_ack(decoded, no_sack_needed, addr)

        except (ValueError, KeyError, TypeError) as e:
            log("[recv corrupt packet]")
            raise e
    else:
        log("[error] timeout")
        sys.exit(-1)
