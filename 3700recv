#!/usr/bin/env python3
#
# CS3700, Fall 2021
# John Henry Rudden, Daniel Susman
# TCP Project Starter Code

import datetime
import json
import sys
import socket

from base64 import b64decode

def log(string):
    sys.stderr.write(datetime.datetime.now().strftime(
        "%H:%M:%S.%f") + " 3700recv: " + string + "\n")


MSG_SIZE = 1500
TIMEOUT = 30
DATA_BUFFER = {} # maybe []
LAST_ACKED = None # Packet?

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = int(sys.argv[1])

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))


def send_ack(packet):
    # TODO

def add_footers(packet):
    # Add bonus info sender relies on

# big thing: keeping invariant of last in-order completed ack
# might want to write a method
# called next in order that keeps adding 1400 to seq number until can't find next
# going to have to figure out
# how to get size of header and make sure data packets + header <= 1500
# create header first and use len(json.dumps(msg)) to figure out size
# need we attach receiver advertised window??????
# print message received every time

# Now listen for packets
while True:
    result = sock.recvfrom(MSG_SIZE)

    # If nothing is ready, we hit the timeout
    if result:
        (data, addr) = result

        try:
            decoded = json.loads(data.decode())

            # If the EOF flag is set, exit
            if (decoded['eof']):
                log("[completed]")
                sys.exit(0)

            # If there is data, we accept it and print it out
            if (decoded['data']):
                data = b64decode(decoded['data'].encode())
                # If we receive data, we assume it's in-order
                # You will need to do much more here
                log("[recv data] " + str(decoded['sequence']) +
                    " (" + str(len(data)) + ") ACCEPTED (in-order)")
                sys.stdout.buffer.write(data)

            # Send back an ack to the sender
            msg = json.dumps({"ack": decoded['sequence'] + len(data)})
            log("ABOUT TO SEND " + msg)
            sent = sock.sendto(msg.encode(), addr)
            log("[sent] " + str(sent))
            if sent < len(msg):
                log("[error] unable to fully send packet")

        except (ValueError, KeyError, TypeError) as e:
            log("[recv corrupt packet]")
            raise e
    else:
        log("[error] timeout")
        sys.exit(-1)
