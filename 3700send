#!/usr/bin/python3
#
# CS3700, Fall 2021
# John Henry Rudden, Daniel Susman
# TCP Project Starter Code
#

import datetime
import json
import sys
import socket
import time
import math

from base64 import b64encode


MSG_SIZE = 1500 # MTU
DATA_SIZE = 1000
TIMEOUT = 4 # Timeout for how long socket reads without recieving data.
SEQUENCE = 0 # Sequence number of next packet not yet sent.
SEQ_BUFFER = {} # map from sequence number to SeqInfo currently in sliding window
SLIDING_WINDOW = 20 # size of sliding window of unacked packets.

# Message Fields
SEQ = "sequence"
DATA = "data"
ACK = "ack"
SACK = "sack"
EOF = "eof"

# RTT Estimation
ALPHA = 0.875
MOV_AVG = 500 # current RTT in milliseconds

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

time.sleep(.5)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(TIMEOUT)

# Object for storing info about a packet that is outbound
# includes time_stamp of when packet was sent (used for determining if packet is dead)
# and the msg itself which was sent.
class SeqInfo:
    time_stamp = None
    msg = None

    def __init__(self, msg):
        self.time_stamp = get_time()
        self.msg = msg

    def build(self, seq_inf):
        return SeqInfo(seq_inf.msg)
    
    def __str__(self) -> str:
        return str(self.msg)

def log(string):
    sys.stderr.write(datetime.datetime.now().strftime(
        "%H:%c:%S.%f") + " 3700send: " + string + "\n")

def get_time():
    """Get current system time in milliseconds"""
    return int(time.time() * 1000)

def send_next_packet():
    """Send the next packet of data from sys.stdin.buffer that has not yet been sent and add it to sliding window."""
    global SEQUENCE, DATA_SIZE
    data = sys.stdin.buffer.read(DATA_SIZE)
    if (len(data) > 0):
        # print(str(b64encode(data)))
        msg = json.dumps({SEQ: SEQUENCE, "data": b64encode(data).decode(), "eof": False, "ack": False, "length": len(data)})
        SEQ_BUFFER[SEQUENCE] = SeqInfo(msg)
        SEQUENCE += len(data)
        if sock.sendto(msg.encode(), dest) < len(msg):
            log("[error] unable to fully send packet")
        else:
            log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
        return True
    else:
        return False

def send_packets():
    """Send a sliding window worth of packets out. Used to init sliding window"""
    global SLIDING_WINDOW, SENT_EVERYTHING
    for i in range(SLIDING_WINDOW):
        if not send_next_packet():
            SENT_EVERYTHING = True
            break

def resend_packets():
    """Resends all packets in the current window."""
    log("RESENDING ALL: " + str(SEQ_BUFFER))
    for seq_info in SEQ_BUFFER.values():
        built = seq_info.build(seq_info)
        sock.sendto(built.msg.encode(), dest)

def handle_ack(packet):
    """Handle an incoming packet ACK. If it is for an item in the current window, then update RTT
    and remove it from the window. If it is a SACK then resend all packets in window.
    """
    global SEQ_BUFFER, ACKED, SEQ

    ack = packet[ACK]
    seq_n = packet[SEQ]
    if not ack:
        log("error handling ACK from receiver")
        sys.exit(-1) # TODO: maybe broken?

    if seq_n in SEQ_BUFFER:
        update_rtt(packet)
        timeout = math.ceil(MOV_AVG / 1000) * 2
        sock.settimeout(timeout)
        log("*********************")
        log("ABOUT TO DELETE SEQUENCE NUMBER: " + str(seq_n))
        log("*********************")
        del SEQ_BUFFER[seq_n]

    if SACK in packet:
        # sack exists on ACK message
        # packets may have been dropped as they're arriving out of order. RESEND ALL in WINDOW
        resend_packets()
        return False
    return True

def update_rtt(packet):
    """Update the current Round Trip Time for our system. RTT is a rolling average."""
    global SEQ_BUFFER, MOV_AVG, SEQ, ALPHA
    seq_info = SEQ_BUFFER.get(packet[SEQ])
    sent_time = seq_info.time_stamp
    received_time = get_time()
    sample = received_time - sent_time
    MOV_AVG = ALPHA * MOV_AVG + (1 - ALPHA) * sample 
    log("Update RTT: "  + str(MOV_AVG))

def is_timeout():
    """Are there any dead packets based on difference in sent time to current time. If packet has been
    out for 2 times the RTT, then it is dead."""
    for packet in SEQ_BUFFER.values():
        if get_time() - packet.time_stamp > 2 * MOV_AVG:
            return True
    return False

# Send first set of packets
send_packets()

# Now read in data, send packets
while True:
    """try reading from socket until timeout. If there was a timeout, we can't ensure packets are still alive
    So resend them.
    """
    try:
        result = sock.recvfrom(MSG_SIZE)
        if result:
            (data, addr) = result
            try:
                decoded = json.loads(data.decode())
                log("[recv pkt] " + str(decoded))
                log("[recv ack] " + str(decoded['ack']))
                if handle_ack(decoded):
                    if is_timeout():
                        resend_packets()
                    else:
                        send_next_packet()
                if len(SEQ_BUFFER) == 0:
                    break

            except (ValueError, KeyError, TypeError) as e:
                log("[recv corrupt packet]")
                raise e

        else:
            log('TIMEOUT')
            sys.exit(-1)

    except socket.timeout as e:
        log(str(e))
        resend_packets()

# Send an volley of eof packets in case one is dropped. This is because we are not awaiting an ack
for i in range (10):
    sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False, "length": 0}).encode(), dest)
sys.exit(0)

